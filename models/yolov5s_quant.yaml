# YOLOv5 ðŸš€ by Ultralytics, AGPL-3.0 license

# Parameters
nc: 80  # number of classes
depth_multiple: 0.33  # model depth multiple
width_multiple: 0.50  # layer channel multiple

anchors:
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32
  
weight_bit_width: 8
act_bit_width: 8

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, QuantConv, [64, 6, 2, 2, weight_bit_width, act_bit_width]],  # 0-P1/2
   [-1, 1, QuantConv, [128, 3, 2, None, weight_bit_width, act_bit_width]],  # 1-P2/4
   [-1, 3, QuantC3, [128, weight_bit_width, act_bit_width]],
   [-1, 1, QuantConv, [256, 3, 2, None, weight_bit_width, act_bit_width]],  # 3-P3/8
   [-1, 6, QuantC3, [256, weight_bit_width, act_bit_width]],
   [-1, 1, QuantConv, [512, 3, 2, None, weight_bit_width, act_bit_width]],  # 5-P4/16
   [-1, 9, QuantC3, [512, weight_bit_width, act_bit_width]],
   [-1, 1, QuantConv, [1024, 3, 2, None, weight_bit_width, act_bit_width]],  # 7-P5/32
   [-1, 3, QuantC3, [1024, weight_bit_width, act_bit_width]],
   [-1, 1, QuantConv, [64, 5,1, None, weight_bit_width, act_bit_width]],  # 9
  ]

# YOLOv5 v6.0 head
head:
  [[-1, 1, QuantConv, [512, 1, 1, None, weight_bit_width, act_bit_width]],
   [-1, 1, QuantUpsample, [None, 2, 'nearest']],
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4
   [-1, 3, QuantC3, [512, weight_bit_width, act_bit_width, False]],  # 13

   [-1, 1, QuantConv, [256, 1, 1, None, weight_bit_width, act_bit_width]],
   [-1, 1, QuantUpsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, QuantC3, [256, weight_bit_width, act_bit_width, False]],  # 17 (P3/8-small)

   [-1, 1, QuantConv, [256, 3, 2, None, weight_bit_width, act_bit_width]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 3, QuantC3, [512, weight_bit_width, act_bit_width, False]],  # 20 (P4/16-medium)

   [-1, 1, QuantConv, [512, 3, 2, None, weight_bit_width, act_bit_width]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, QuantC3, [1024, weight_bit_width, act_bit_width, False]],  # 23 (P5/32-large)

   [[17, 20, 23], 1, Detect, [nc, anchors, True, weight_bit_width]],  # Detect(P3, P4, P5)
  ]
